version: '3.8'

services:
  # SafeZoneAI Backend API
  api:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      target: production
    container_name: safezone-api
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DATABASE_URL=sqlite:///data/safezone.db
    env_file:
      - ../.env
    volumes:
      - ../models:/app/models
      - ../data:/app/data
      - ../logs:/app/logs
      # Mount camera device (adjust as needed)
      - /dev/video0:/dev/video0
    devices:
      - /dev/video0:/dev/video0  # Webcam access
    networks:
      - safezone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SafeZoneAI Dashboard
  dashboard:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      target: production
    container_name: safezone-dashboard
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - API_BASE_URL=http://api:8000
    command: ["streamlit", "run", "dashboard/streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0", "--server.headless=true"]
    depends_on:
      api:
        condition: service_healthy
    networks:
      - safezone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Detection Service (separate from API for scaling)
  detector:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      target: production
    container_name: safezone-detector
    environment:
      - VIDEO_SOURCE=0
      - FRAME_SKIP=2
      - DISPLAY_VIDEO=false
      - CONFIDENCE_THRESHOLD=0.6
      - CROWD_THRESHOLD=10
    env_file:
      - ../.env
    volumes:
      - ../models:/app/models
      - ../data:/app/data
      - ../logs:/app/logs
      - /dev/video0:/dev/video0
    devices:
      - /dev/video0:/dev/video0
    command: ["python", "-m", "detection.detector"]
    depends_on:
      api:
        condition: service_healthy
    networks:
      - safezone-network
    restart: unless-stopped

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: safezone-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - dashboard
    networks:
      - safezone-network
    restart: unless-stopped
    profiles:
      - production

  # Database service for production
  database:
    image: postgres:13
    container_name: safezone-db
    environment:
      POSTGRES_DB: safezone
      POSTGRES_USER: safezone
      POSTGRES_PASSWORD: ${DB_PASSWORD:-safezone_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - safezone-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U safezone"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:6-alpine
    container_name: safezone-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    networks:
      - safezone-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: safezone-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - safezone-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: safezone-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - safezone-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  safezone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Docker Compose profiles for different deployment scenarios
# Usage examples:
# docker-compose up                                    # Basic setup
# docker-compose --profile production up              # Production with database and nginx
# docker-compose --profile monitoring up              # Add monitoring stack
# docker-compose --profile production --profile monitoring up  # Full production setup